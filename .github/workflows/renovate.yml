name: Renovate Lockfile Auto-Merge (npm)

on:
  pull_request:
    types: [opened, synchronize, labeled, reopened, ready_for_review]
    branches: [main, development]

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: renovate-lockfile-${{ github.event.pull_request.number }}
  cancel-in-progress: false

jobs:
  gate:
    name: Gate: lockfile-only + label + renovate actor
    if: >
      github.actor == 'renovate[bot]' &&
      github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - name: Verify PR only changes package-lock.json
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const files = await github.paginate(
              github.rest.pulls.listFiles,
              { owner: context.repo.owner, repo: context.repo.repo, pull_number: pr.number }
            );
            const changed = files.map(f => f.filename);

            // Only allow package-lock.json anywhere (root or nested workspaces)
            const offenders = files
              .filter(f => !/(^|\/)package-lock\.json$/.test(f.filename))
              .map(f => f.filename);

            // Explicitly block any package.json change
            const hasPkgJson = changed.some(p => /(^|\/)package\.json$/.test(p));

            if (hasPkgJson) {
              core.setFailed('package.json change detected â€” not a lockfile-only PR.');
            } else if (offenders.length) {
              core.setFailed(`Non-lockfile changes detected: ${offenders.join(', ')}`);
            } else if (changed.length === 0) {
              core.setFailed('No file changes found.');
            } else {
              core.info(`Lockfile-only change set -> ${changed.join(', ')}`);
            }

      - name: Require "lockfile-maintenance" label
        uses: actions/github-script@v7
        with:
          script: |
            const labels = context.payload.pull_request.labels.map(l => l.name);
            if (!labels.includes('lockfile-maintenance')) {
              core.setFailed('Missing "lockfile-maintenance" label');
            } else {
              core.info('Required label present');
            }

  approve:
    name: Auto-approve (MERGE_TOKEN)
    needs: gate
    runs-on: ubuntu-latest
    steps:
      - name: Approve PR
        uses: hmarr/auto-approve-action@v3
        with:
          github-token: ${{ secrets.MERGE_TOKEN }}

  enable-automerge:
    name: Enable native auto-merge
    needs: approve
    runs-on: ubuntu-latest
    steps:
      - name: Enable native auto-merge (SQUASH)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.MERGE_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            await github.graphql(
              `
              mutation ($pullRequestId: ID!) {
                enablePullRequestAutoMerge(input: {
                  pullRequestId: $pullRequestId,
                  mergeMethod: SQUASH
                }) {
                  clientMutationId
                }
              }
              `,
              { pullRequestId: pr.node_id }
            );
            core.info('Auto-merge enabled (SQUASH). Will merge after required checks pass.');
